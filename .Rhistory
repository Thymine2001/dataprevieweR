golem::detach_all_attached()
library(golem)
library(shiny)
source('./R/app_server.R')
source('./R/app_ui.R')
run_app()
source('./R/run_app.R')
run_app()
source('./R/app_ui.R')
run_app()
source('./R/app_server.R')
source('./R/app_ui.R')
source('./R/run_app.R')
run_app()
devtools::build(path ="~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
install.packages(
pkgs = '~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR/dataprevieweR_0.0.0.9000.tar.gz',
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
# 尝试用包直接运行app
shinyapptest::run_app()
install.packages("shinyapptest")
# 尝试用包直接运行app
shinyapptest::run_app()
devtools::install()
# 尝试用包直接运行app
shinyapptest::run_app()
# 尝试用包直接运行app
dataprevieweR::run_app()
install.packages("automagic")
library(automagic)
installed.packages()[, "Package"]
"automagic" %in% installed.packages()[, "Package"]
install.packages("automagic")
# 安装 devtools（如未安装）
install.packages("devtools")
# 安装打包好的 golem 包
devtools::install_local("dataprevieweR_0.0.0.9000.tar.gz")
# 运行应用
dataprevieweR::run_app()
# Function to check and install required packages
check_and_install_packages <- function(packages) {
for (pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(paste("Installing package:", pkg))
tryCatch({
install.packages(pkg, repos = "https://cran.rstudio.com/")
}, error = function(e) {
stop(paste("Failed to install package:", pkg, ". Error:", e$message))
})
}
library(pkg, character.only = TRUE)
}
}
# List of required packages
required_packages <- c("shiny", "DT", "dplyr", "ggplot2", "readr", "shinythemes", "tidyr")
# Call the function to ensure packages are installed
check_and_install_packages(required_packages)
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
options(shiny.maxRequestSize = 2000 * 1024^2)
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
usethis::use_package("dplyr", type = "Imports")
usethis::use_package("ggplot2", type = "Imports")
usethis::use_package("magrittr", type = "Imports")
usethis::use_package("shinythemes", type = "Imports")
usethis::use_package("tidyr", type = "Imports")
usethis::use_package("readr", type = "Imports")
usethis::use_package("DT", type = "Imports")
usethis::use_package("golem", type = "Imports")
usethis::use_package("config", type = "Imports")
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/run_app.R")
file <- "R/app_ui.R"
x <- readLines(file, encoding = "UTF-8", warn = FALSE)
# A) 替换 emoji 与 ±
x <- gsub("🗂️", "\\\\U0001F5C2\\\\U0000FE0F", x, fixed = TRUE)
x <- gsub("📊", "\\\\U0001F4CA", x, fixed = TRUE)
x <- gsub("±",  "\\\\u00B1", x, fixed = TRUE)
# B) 替换/清理 CSS 注释中的中文（把常见中文注释替换为英文；需要可继续添加映射）
map <- c(
"主题" = "theme",
"黑色中文文字" = "black text",
"背景 & 全局文字" = "background & global text",
"白底" = "white background",
"黑字" = "black text",
"侧边/面板" = "sidebar/panel",
"浅灰背景" = "light gray background",
"按钮" = "buttons",
"选择卡" = "selector cards",
"表格" = "table",
"输入框" = "inputs"
)
for (k in names(map)) {
x <- gsub(k, map[[k]], x, fixed = TRUE)
}
# 保险：把 CSS 注释里任何剩余非 ASCII 清掉（仅限 /* ... */ 中）
# 这个处理较粗糙：仅删除注释内的非 ASCII 字符，不改别处
non_ascii <- function(s) intToUtf8(utf8ToInt(s)[utf8ToInt(s) <= 127], multiple = TRUE)
in_comment <- FALSE
for (i in seq_along(x)) {
line <- x[i]
if (grepl("/\\*", line)) in_comment <- TRUE
if (in_comment) {
x[i] <- gsub("/\\*.*?\\*/", function(m) {  # 单行注释块
paste0("/* ", non_ascii(sub("^/\\*|\\*/$", "", m)), " */")
}, line)
if (in_comment && grepl("\\*/", line)) in_comment <- FALSE
if (in_comment) x[i] <- non_ascii(line)  # 注释块内逐行清理非 ASCII
}
}
# 再检视一次
tools::showNonASCIIfile(file)
file <- "R/app_ui.R"
x <- readLines(file, encoding = "UTF-8", warn = FALSE)
# A) 替换 emoji 与 ±
x <- gsub("🗂️", "\\\\U0001F5C2\\\\U0000FE0F", x, fixed = TRUE)
x <- gsub("📊", "\\\\U0001F4CA", x, fixed = TRUE)
x <- gsub("±",  "\\\\u00B1", x, fixed = TRUE)
# B) 替换/清理 CSS 注释中的中文（把常见中文注释替换为英文；需要可继续添加映射）
map <- c(
"主题" = "theme",
"黑色中文文字" = "black text",
"背景 & 全局文字" = "background & global text",
"白底" = "white background",
"黑字" = "black text",
"侧边/面板" = "sidebar/panel",
"浅灰背景" = "light gray background",
"按钮" = "buttons",
"选择卡" = "selector cards",
"表格" = "table",
"输入框" = "inputs"
)
for (k in names(map)) {
x <- gsub(k, map[[k]], x, fixed = TRUE)
}
# 保险：把 CSS 注释里任何剩余非 ASCII 清掉（仅限 /* ... */ 中）
# 这个处理较粗糙：仅删除注释内的非 ASCII 字符，不改别处
non_ascii <- function(s) intToUtf8(utf8ToInt(s)[utf8ToInt(s) <= 127], multiple = TRUE)
in_comment <- FALSE
for (i in seq_along(x)) {
line <- x[i]
if (grepl("/\\*", line)) in_comment <- TRUE
if (in_comment) {
x[i] <- gsub("/\\*.*?\\*/", function(m) {  # 单行注释块
paste0("/* ", non_ascii(sub("^/\\*|\\*/$", "", m)), " */")
}, line)
if (in_comment && grepl("\\*/", line)) in_comment <- FALSE
if (in_comment) x[i] <- non_ascii(line)  # 注释块内逐行清理非 ASCII
}
}
writeLines(x, file, useBytes = TRUE)
# 再检视一次
tools::showNonASCIIfile(file)
# 再检视一次
tools::showNonASCIIfile(file)
# 再检视一次
tools::showNonASCIIfile(file)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
file.show(logfile[length(logfile)])
file.show(logfile[length(logfile)])
# 看具体是哪一个 Rd 报警
logfile <- list.files("..", pattern = "00check.log", recursive = TRUE, full.names = TRUE)
unlink("man", recursive = TRUE)
devtools::document()
devtools::check()
run_app()
unlink("man", recursive = TRUE)
devtools::document()
devtools::check()
run_app()
unlink("man", recursive = TRUE)
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/run_app.R")
devtools::document()
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/run_app.R")
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/run_app.R")
devtools::document()
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/run_app.R")
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/run_app.R")
devtools::document()
devtools::check()
run_app()
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/run_app.R")
devtools::document()
devtools::check()
run_app()
devtool::build()
library(devtool)
library(devtools)
devtools::build()
run_app()
run_app()
run_app()
run_app()
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/run_app.R")
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/run_app.R")
devtools::document()
devtools::check()
usethis::use_build_ignore(".github")
tools::showNonASCIIfile("R/app_ui.R")
tools::showNonASCIIfile("R/run_app.R")
devtools::document()
devtools::check()
ls("package:dataprevieweR", all.names = TRUE)
ls("package:dataprevieweR")
run_app()
devtools::build()
if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
remotes::install_github("Thymine2001/dataprevieweR")
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
tools::showNonASCIIfile("R/app_server.R")
tools::showNonASCIIfile("R/get_label.R")
devtools::document()
devtools::document()
devtools::check()
convert_to_unicode <- function(file_path) {
lines <- readLines(file_path, encoding = "UTF-8", warn = FALSE)
convert_line <- function(line) {
paste0(
sapply(strsplit(line, "")[[1]], function(char) {
if (any(charToRaw(char) > as.raw(127))) {
sprintf("\\u%04x", utf8ToInt(char))
} else {
char
}
}),
collapse = ""
)
}
new_lines <- vapply(lines, convert_line, character(1))
writeLines(new_lines, file_path, useBytes = TRUE)
message("✅ Converted non-ASCII characters in ", file_path)
}
# 使用示例
convert_to_unicode("R/app_server.R")
convert_to_unicode("R/get_label.R")
tools::showNonASCIIfile("R/app_server.R")
tools::showNonASCIIfile("R/get_label.R")
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
run_app()
