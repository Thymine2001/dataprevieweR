golem::detach_all_attached()
library(golem)
library(shiny)
source('./R/app_server.R')
source('./R/app_ui.R')
run_app()
source('./R/run_app.R')
run_app()
source('./R/app_ui.R')
run_app()
source('./R/app_server.R')
source('./R/app_ui.R')
source('./R/run_app.R')
run_app()
devtools::build(path ="~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
install.packages(
pkgs = '~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR/dataprevieweR_0.0.0.9000.tar.gz',
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
# 尝试用包直接运行app
shinyapptest::run_app()
install.packages("shinyapptest")
# 尝试用包直接运行app
shinyapptest::run_app()
devtools::install()
# 尝试用包直接运行app
shinyapptest::run_app()
# 尝试用包直接运行app
dataprevieweR::run_app()
install.packages("automagic")
library(automagic)
installed.packages()[, "Package"]
"automagic" %in% installed.packages()[, "Package"]
install.packages("automagic")
# 安装 devtools（如未安装）
install.packages("devtools")
# 安装打包好的 golem 包
devtools::install_local("dataprevieweR_0.0.0.9000.tar.gz")
# 运行应用
dataprevieweR::run_app()
# Function to check and install required packages
check_and_install_packages <- function(packages) {
for (pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(paste("Installing package:", pkg))
tryCatch({
install.packages(pkg, repos = "https://cran.rstudio.com/")
}, error = function(e) {
stop(paste("Failed to install package:", pkg, ". Error:", e$message))
})
}
library(pkg, character.only = TRUE)
}
}
# List of required packages
required_packages <- c("shiny", "DT", "dplyr", "ggplot2", "readr", "shinythemes", "tidyr")
# Call the function to ensure packages are installed
check_and_install_packages(required_packages)
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
options(shiny.maxRequestSize = 2000 * 1024^2)
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
devtools::build()
devtools::build()
install.packages("devtools")
devtools::build()
install.packages("usethis")
devtools::build()
install.packages("usethis", type = "binary")
devtools::build()
setwd(""C:/Users/tangh/OneDrive - purdue.edu/win_arm64_dataprevieweR_0.0.0.9000.tar.gz"")
setwd("C:/Users/tangh/OneDrive - purdue.edu/win_arm64_dataprevieweR_0.0.0.9000.tar.gz")
setwd("C:/Users/tangh/OneDrive - purdue.edu")
remotes::install_local("win_arm64_dataprevieweR_0.0.0.9000.tar.gz", dependencies = TRUE)
untar("C:/Users/tangh/AppData/Local/Temp/Rtmpc9jUmy/file1d3c7294e91/dataprevieweR_0.0.0.9000.tar.gz", exdir = "dataprevieweR_src")
r_files <- list.files("dataprevieweR_src/dataprevieweR/R", pattern = "\\.R$", full.names = TRUE)
for (f in r_files) {
cat("🔍 Loading:", f, "\n")
tryCatch(
source(f),
error = function(e) {
cat("❌ Error in", f, ":", conditionMessage(e), "\n\n")
}
)
}
pkgs <- c("shiny", "dplyr", "readr", "DT", "ggplot2")
for (pkg in pkgs) {
cat("Loading", pkg, "...\n")
tryCatch(
library(pkg, character.only = TRUE),
error = function(e) {
cat("❌ Failed to load", pkg, ":", conditionMessage(e), "\n")
}
)
}
if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
remotes::install_github("Thymine2001/dataprevieweR")
install.packages("DT")
install.packages(c("htmlwidgets", "jquerylib", "jsonlite", "htmltools", "crosstalk"), dependencies = TRUE)
install.packages("DT")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
Sys.which("make")
library(dataprevieweR)
run_app()
run_app()
library(dataprevieweR)
run_app()
run_app()
rsconnect::setAccountInfo
rsconnect::setAccountInfo(name='vb6clt-huangyi-tang', token='B4F52472163295E693B819BF15CD942B', secret='Zr0g/r6ySZpbncPb27b1YvHQLX1mqjvtLUQaE4XR')
rsconnect::setAccountInfo()
rsconnect::setAccountInfo(
name = 'vb6clt-huangyi-tang',
token = 'B4F52472163295E693B819BF15CD942B',
secret = 'Zr0g/r6ySZpbncPb27b1YvHQLX1mqjvtLUQaE4XR'
)
rsconnect::deployApp("run_app.R")
rsconnect::deployApp("R/run_app.R")
rsconnect::deployApp("~/R/run_app.R")
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR/R/run_app.R")
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
setwd("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
source("app.R")
setwd("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR/R")
source("app.R")
setwd("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
source("app.R")
setwd("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR/R")
source("app.R")
devtools::load_all()
devtools::load_all()
run_app()
library(golem)
run_app()
devtools::load_all()
remotes::install_github("Thymine2001/dataprevieweR", force = TRUE)
run_app()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
devtools::load_all()
run_app()
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
devtools::load_all()
run_app()
devtools::load_all()
rsconnect::deployApp("~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
f90<-read.table("/Users/huangyitang/Library/CloudStorage/OneDrive-purdue.edu/桌面/Chapter02/testped/Pedigree_3_space.txt.solinb",header=TRUE)
f90<-read.table("/Users/huangyitang/Library/CloudStorage/OneDrive-purdue.edu/桌面/Chapter02/testped/Pedigree_3_space.txt.solinb",header=F)
cpp<-read.table("/Users/huangyitang/Library/CloudStorage/OneDrive-purdue.edu/Inbreeding_cal_cplus/Pedigree_3_space_results.csv",header=T)
cpp<-read.table("/Users/huangyitang/Library/CloudStorage/OneDrive-purdue.edu/Inbreeding_cal_cplus/Pedigree_3_space_results.csv",sep="\t",header=T)
cpp<-read.table("/Users/huangyitang/Library/CloudStorage/OneDrive-purdue.edu/Inbreeding_cal_cplus/Pedigree_3_space_results.csv",sep="/t",header=T)
cpp<-read.csv("/Users/huangyitang/Library/CloudStorage/OneDrive-purdue.edu/Inbreeding_cal_cplus/Pedigree_3_space_results.csv",header=T)
# 按 ID 匹配
merged <- merge(
cpp[, c("Progeny", "Inbreeding_Coefficient")],
f90[, c("V1", "V2")],
by.x = "Progeny",
by.y = "V1",
all = FALSE
)
# 计算差异
merged$diff <- merged$Inbreeding_Coefficient - merged$V2
# 看看匹配的数量和差异情况
summary(merged$diff)
# 查看前几行对比
head(merged)
# 相关系数
cor(merged$Inbreeding_Coefficient, merged$V2, use = "complete.obs")
# 绘制散点图
plot(merged$Inbreeding_Coefficient, merged$V2,
xlab = "C++ Inbreeding", ylab = "f90 Inbreeding",
main = "Comparison of Inbreeding Coefficients")
abline(0, 1, col = "red")  # 理论一致的参考线
# 绘制散点图
plot(merged$Inbreeding_Coefficient, merged$V2,
xlab = "C++ Inbreeding", ylab = "f90 Inbreeding",
main = "Comparison of Inbreeding Coefficients")
# 看看匹配的数量和差异情况
summary(merged$diff)
