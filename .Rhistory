golem::detach_all_attached()
library(golem)
library(shiny)
source('./R/app_server.R')
source('./R/app_ui.R')
run_app()
source('./R/run_app.R')
run_app()
source('./R/app_ui.R')
run_app()
source('./R/app_server.R')
source('./R/app_ui.R')
source('./R/run_app.R')
run_app()
devtools::build(path ="~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR")
install.packages(
pkgs = '~/Library/CloudStorage/OneDrive-purdue.edu/dataprevieweR/dataprevieweR_0.0.0.9000.tar.gz',
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
# 尝试用包直接运行app
shinyapptest::run_app()
install.packages("shinyapptest")
# 尝试用包直接运行app
shinyapptest::run_app()
devtools::install()
# 尝试用包直接运行app
shinyapptest::run_app()
# 尝试用包直接运行app
dataprevieweR::run_app()
install.packages("automagic")
library(automagic)
installed.packages()[, "Package"]
"automagic" %in% installed.packages()[, "Package"]
install.packages("automagic")
# 安装 devtools（如未安装）
install.packages("devtools")
# 安装打包好的 golem 包
devtools::install_local("dataprevieweR_0.0.0.9000.tar.gz")
# 运行应用
dataprevieweR::run_app()
# Function to check and install required packages
check_and_install_packages <- function(packages) {
for (pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(paste("Installing package:", pkg))
tryCatch({
install.packages(pkg, repos = "https://cran.rstudio.com/")
}, error = function(e) {
stop(paste("Failed to install package:", pkg, ". Error:", e$message))
})
}
library(pkg, character.only = TRUE)
}
}
# List of required packages
required_packages <- c("shiny", "DT", "dplyr", "ggplot2", "readr", "shinythemes", "tidyr")
# Call the function to ensure packages are installed
check_and_install_packages(required_packages)
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
options(shiny.maxRequestSize = 2000 * 1024^2)
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
devtools::build()
